package com.openclassrooms.realestatemanager.repositories;

import android.arch.lifecycle.LiveData;
import android.util.Log;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.firebase.firestore.DocumentSnapshot;
import com.openclassrooms.realestatemanager.models.local.immovables.Immo;
import com.openclassrooms.realestatemanager.models.database.dao.ImmoDao;
import com.openclassrooms.realestatemanager.utils.FirebaseImmoHelper;

import java.util.List;
import java.util.concurrent.Executor;

import javax.inject.Inject;

public class ImmoDataRepository {

    private final ImmoDao immoDao;
    private final Executor executor;
    private Immo selectedImmo;

    // --- CONSTRUCTOR ---
    @Inject
    public ImmoDataRepository(ImmoDao immoDao, Executor executor) {
        this.immoDao = immoDao;
        this.executor = executor;
    }

    // --- GET ---
    public LiveData<List<Immo>> getImmosByAgent(long agentId){ return this.immoDao.getImmosByAgent(agentId); }

    public LiveData<List<Immo>> getAllImmos(){
        getAllImmosFromFirebase();
        return this.immoDao.getAllImmos();
    }

    public LiveData<Immo> getImmoById(long immoId){
        getImmoByIdFromFirebase(immoId);
        return this.immoDao.getImmoById(immoId);
    }

    // --- CREATE ---
    public void createImmo(Immo immo){
        long autoGeneratedId = immoDao.insertImmo(immo);
        immo.setId(autoGeneratedId);
        createImmoInFirebase(immo);
    }

    // --- DELETE ---
    public void deleteImmo(long immoId){ immoDao.deleteImmo(immoId); }

    // --- UPDATE ---
    public void updateImmo(Immo immo){ immoDao.updateImmo(immo); }

    // --- REMOTE DATA GETTER ---
    private void getImmoByIdFromFirebase(long id){
        executor.execute(() -> {
            FirebaseImmoHelper.getImmoById(String.valueOf(id)).addOnCompleteListener(task -> {
                executor.execute(() -> {
                    if (task.getResult().exists()) {
                        Immo immo = task.getResult().toObject(Immo.class);
                        // check if he already exist in db
                        boolean immoExists = (immoDao.hasImmo(immo.getId()) != null);
                        // if not create it
                        if (!immoExists) {
                            immoDao.insertImmo(immo);
                        }
                    }
                });
            }).addOnFailureListener(this.onFailureListener());
        });
    }

    private void getAllImmosFromFirebase(){
        executor.execute(() -> {
            FirebaseImmoHelper.getAllImmos().addOnCompleteListener(task -> {
                executor.execute(() -> {
                    // for each immo return by firebase
                    if (!task.getResult().isEmpty()) {
                        for (DocumentSnapshot immovable : task.getResult().getDocuments()) {
                            Immo immo = immovable.toObject(Immo.class);
                            // check if he already exist in db
                            boolean immoExists = (immoDao.hasImmo(immo.getId()) != null);
                            // if not create it
                            if (!immoExists) {
                                immoDao.insertImmo(immo);
                            }
                        }
                    }
                });
            }).addOnFailureListener(this.onFailureListener());
        });
    }

    // --- REMOTE DATA SETTER ---
    private void createImmoInFirebase(Immo immo){
        executor.execute(() -> {
            FirebaseImmoHelper.createImmo(immo).addOnCompleteListener(task -> {
                executor.execute(() -> {
                    // something notification related
                    Log.i("ImmoDataRepository", "ImmoAddOnFireBase");
                });
            }).addOnFailureListener(this.onFailureListener());
        });
    }

    public Immo getSelectedImmo() {
        return selectedImmo;
    }

    public void setSelectedImmo(Immo selectedImmo) {
        this.selectedImmo = selectedImmo;
    }

    private OnFailureListener onFailureListener(){
        return Throwable::printStackTrace;
    }

}
