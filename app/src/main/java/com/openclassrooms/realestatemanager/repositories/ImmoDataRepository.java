package com.openclassrooms.realestatemanager.repositories;

import android.arch.lifecycle.LiveData;
import android.arch.lifecycle.MutableLiveData;
import android.content.Context;
import android.graphics.Bitmap;
import android.net.Uri;
import android.provider.MediaStore;
import android.support.v4.app.NotificationCompat;
import android.support.v4.app.NotificationManagerCompat;
import android.util.Log;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.firebase.firestore.DocumentSnapshot;
import com.openclassrooms.realestatemanager.R;
import com.openclassrooms.realestatemanager.models.local.immovables.Immo;
import com.openclassrooms.realestatemanager.models.database.dao.ImmoDao;
import com.openclassrooms.realestatemanager.models.local.immovables.Picture;
import com.openclassrooms.realestatemanager.utils.FirebaseImmoHelper;
import com.openclassrooms.realestatemanager.utils.FirebaseStorageHelper;
import com.openclassrooms.realestatemanager.utils.LocalStorageHelper;
import com.openclassrooms.realestatemanager.utils.Utils;

import java.io.File;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executor;

import javax.inject.Inject;

public class ImmoDataRepository {

    private final ImmoDao immoDao;
    private final Executor executor;
    private final File destination;
    private final Context context;
    private final MutableLiveData<Immo> selectedImmo = new MutableLiveData<Immo>();
    private Immo tempImmo = new Immo();
    private final int CREATION_SOURCE = 0;
    private final int UPDATE_SOURCE = 1;

    // --- CONSTRUCTOR ---
    @Inject
    public ImmoDataRepository(ImmoDao immoDao, Executor executor, File destination, Context context) {
        this.immoDao = immoDao;
        this.executor = executor;
        this.destination = destination;
        this.context = context;
    }

    // --- GET ---
    public LiveData<List<Immo>> getImmosByAgent(long agentId){ return this.immoDao.getImmosByAgent(agentId); }

    public LiveData<List<Immo>> getAllImmos(){
        getAllImmosFromFirebase();
        return this.immoDao.getAllImmos();
    }

    public LiveData<List<Immo>> getSearchImmos(int minPrice, int maxPrice, int minSurface, int maxSurface, int enterDate, int sellingDate){

        if(minPrice == -1 && maxPrice == -1 && minSurface == -1 && maxSurface == -1 && enterDate == -1 && sellingDate == -1) {
            // none init
            return this.immoDao.getAllImmos();
        }else if(maxPrice == -1 && maxSurface == -1){
            // no both
            return this.immoDao.getSearchImmo3(minPrice, minSurface, enterDate, sellingDate);
        }else if(maxPrice == -1){
            // no maxPrice
            return this.immoDao.getSearchImmos1(minPrice, minSurface, maxSurface, enterDate, sellingDate);
        }else if(maxSurface == -1){
            // no maxSurface
            return this.immoDao.getSearchImmos2(minPrice, maxPrice, minSurface, enterDate, sellingDate);
        }else {
            return this.immoDao.getSearchImmos(minPrice, maxPrice, minSurface, maxSurface, enterDate, sellingDate);
        }
    }

    public LiveData<Immo> getImmoById(long immoId){
        getImmoByIdFromFirebase(immoId);
        return this.immoDao.getImmoById(immoId);
    }

    // --- CREATE ---
    public void createImmo(Immo immo){
        long autoGeneratedId = immoDao.insertImmo(immo);
        immo.setId(autoGeneratedId);
        createImmoInFirebase(immo);
    }

    // --- DELETE ---
    public void deleteImmo(long immoId){ immoDao.deleteImmo(immoId); }

    // --- UPDATE ---
    public void updateImmo(Immo immo){
        immoDao.updateImmo(immo);
        updateImmoInFirebase(immo);
    }

    // --- REMOTE DATA GETTER ---
    private void getImmoByIdFromFirebase(long id){
        FirebaseImmoHelper.getImmoById(String.valueOf(id)).addOnCompleteListener(task -> {
            executor.execute(() -> {
                if (task.getResult().exists()) {
                    Immo immo = task.getResult().toObject(Immo.class);
                    // check if he already exist in db
                    boolean immoExists = (immoDao.hasImmo(immo.getId()) != null);
                    // if not create it
                    if (!immoExists) {
                        immoDao.insertImmo(immo);
                        for(Picture pic : immo.getGallery()){
                            FirebaseStorageHelper.DownloadImage(destination, pic.getFileName());
                        }
                    }
                }
            });
        }).addOnFailureListener(this.onFailureListener());
    }

    private void getAllImmosFromFirebase(){
        FirebaseImmoHelper.getAllImmos().addOnCompleteListener(task -> {
            executor.execute(() -> {
                // for each immo return by firebase
                if (!task.getResult().isEmpty()) {
                    for (DocumentSnapshot immovable : task.getResult().getDocuments()) {
                        Immo immo = immovable.toObject(Immo.class);
                        // check if he already exist in db
                        boolean immoExists = (immoDao.hasImmo(immo.getId()) != null);
                        // if not create it
                        if (!immoExists) {
                            immoDao.insertImmo(immo);
                            for(Picture pic : immo.getGallery()){
                                FirebaseStorageHelper.DownloadImage(destination, pic.getFileName());
                            }
                        }
                    }
                }
            });
        }).addOnFailureListener(this.onFailureListener());
    }

    // --- REMOTE DATA SETTER ---
    private void createImmoInFirebase(Immo immo){
        FirebaseImmoHelper.createImmo(immo).addOnCompleteListener(task -> {
            for(Picture pic : immo.getGallery()){
                executor.execute(() -> {
                    Bitmap bitmap = null;
                    try{
                        bitmap = MediaStore.Images.Media.getBitmap(context.getContentResolver(), Uri.parse(pic.getUri()));
                    } catch (Exception e){
                        e.printStackTrace();
                    } finally {
                        if(bitmap != null){
                            LocalStorageHelper.saveToInternalStorage(bitmap, LocalStorageHelper.createOrGetFile(destination, pic.getFileName()), 0);
                            FirebaseStorageHelper.UploadImageFromBitmap(bitmap, pic.getFileName());
                        }
                    }
                });
            }
            // Send notification
            Utils.sendSimpleNotification(context, CREATION_SOURCE);
        }).addOnFailureListener(this.onFailureListener());
    }

    // REMOTE DATA UPDATER
    private void updateImmoInFirebase(Immo immo){
        FirebaseImmoHelper.updateImmo(immo).addOnCompleteListener(task -> {
            for(Picture pic : immo.getGallery()){
                executor.execute(() -> {
                    if(!LocalStorageHelper.createOrGetFile(destination, pic.getFileName()).exists()) {
                        Bitmap bitmap = null;
                        try {
                            bitmap = MediaStore.Images.Media.getBitmap(context.getContentResolver(), Uri.parse(pic.getUri()));
                        } catch (Exception e) {
                            e.printStackTrace();
                        } finally {
                            if (bitmap != null) {
                                LocalStorageHelper.saveToInternalStorage(bitmap, LocalStorageHelper.createOrGetFile(destination, pic.getFileName()), 0);
                                FirebaseStorageHelper.UploadImageFromBitmap(bitmap, pic.getFileName());
                            }
                        }
                    }
                });
            }
            // Send notification
            Utils.sendSimpleNotification(context, UPDATE_SOURCE);
            Log.i("ImmoDataRepository", "ImmoUpdateOnFireBase");
        }).addOnFailureListener(this.onFailureListener());
    }

    public LiveData<Immo> getSelectedImmo() {
        return selectedImmo;
    }
    public Immo getTempImmo() { return tempImmo; }

    public void setSelectedImmo(Immo selectedImmo) {
        this.selectedImmo.setValue(selectedImmo);
    }
    public void setTempImmo(Immo tempImmo) { this.tempImmo = tempImmo; }

    private OnFailureListener onFailureListener(){
        return Throwable::printStackTrace;
    }

}
